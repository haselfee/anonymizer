
# 1) Pipeline soll auf Push + MR + Tags laufen

workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == "push"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_TAG
    - when: never

# 2) Stage-Reihenfolge explizit

stages:
  - lint
  - test
  - security

variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  TRIVY_CACHE_DIR: ".trivy-cache"

default:
  image: python:3.12-slim
  before_script:
    - python -V
    - pip install --upgrade pip
    # Dev-Tools
    - |
      if [ -f requirements-dev.txt ]; then
        pip install -r requirements-dev.txt
      else
        pip install pytest pytest-cov httpx ruff mypy
      fi

lint:
  stage: lint
  script:
    - ruff --version
    - ruff format backend --check
    - ruff check backend --select E,F
  # cache:  # ← entfernen

test:backend:
  stage: test
  image: python:3.12-slim
  before_script:
    - python -m venv .venv
    - . .venv/bin/activate
    - pip install -U pip
    - pip install -r requirements.txt
    - if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
  script:
    # Stelle sicher, dass Python deinen Code findet:
    - export PYTHONPATH=backend
    # Starte Tests aus dem Repo-Root gegen das Backend-Test-Verzeichnis
    # pytest.ini liefert die Coverage-Flags; wir ergänzen nur den JUnit-Report
    - pytest backend/tests -q --junit-xml=pytest-junit.xml
  cache:
    key:
      prefix: "pip"
      files:
        - requirements.txt
        - requirements-dev.txt
    paths:
      - .venv/
    policy: pull-push
  artifacts:
    when: always
    reports:
      junit: pytest-junit.xml
    paths:
      - .pytest_cache/

variables:
  BACKEND_IMAGE: "$CI_REGISTRY_IMAGE/anonymizer-backend:1.0.0"
  FRONTEND_IMAGE: "$CI_REGISTRY_IMAGE/anonymizer-frontend:1.0.0"
  TRIVY_CACHE_DIR: .trivy-cache
  # Zugang zur GitLab Container Registry:
  TRIVY_USERNAME: "gitlab-ci-token"
  TRIVY_PASSWORD: "$CI_JOB_TOKEN"

trivy:backend:
  stage: security
  image: aquasec/trivy:latest
  entrypoint: [""]                 # <— Shell wieder aktivieren
  script:
    - trivy --version
    - trivy image --severity CRITICAL,HIGH --ignore-unfixed --no-progress "$BACKEND_IMAGE"
    - trivy image --format cyclonedx --output backend-sbom.cdx.json "$BACKEND_IMAGE"
  artifacts:
    when: always
    paths: [ backend-sbom.cdx.json ]
    reports: { cyclonedx: backend-sbom.cdx.json }
  allow_failure: true

trivy:frontend:
  stage: security
  image: aquasec/trivy:latest
  entrypoint: [""]                 # <— Shell wieder aktivieren
  script:
    - trivy --version
    - trivy image --severity CRITICAL,HIGH --ignore-unfixed --no-progress "$FRONTEND_IMAGE"
    - trivy image --format cyclonedx --output frontend-sbom.cdx.json "$FRONTEND_IMAGE"
  artifacts:
    when: always
    paths: [ frontend-sbom.cdx.json ]
    reports: { cyclonedx: frontend-sbom.cdx.json }
  allow_failure: true