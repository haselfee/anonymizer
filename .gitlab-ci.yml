stages: [lint, build, test, security]

variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  TRIVY_CACHE_DIR: ".trivy-cache"

default:
  image: python:3.12-slim
  before_script:
    - python -V
    - pip install --upgrade pip
    # Dev-Tools
    - |
      if [ -f requirements-dev.txt ]; then
        pip install -r requirements-dev.txt
      else
        pip install pytest pytest-cov httpx ruff mypy
      fi

lint:
  stage: lint
  script:
    - ruff check backend --diff
    - ruff format backend --check
  cache:
    key:
      prefix: "ruff"
      files:
        - requirements.txt
        - requirements-dev.txt
    paths:
      - backend/.ruff_cache/
  policy: pull-push

test:backend:
  stage: test
  image: python:3.12-slim
  before_script:
    - python -m venv .venv && . .venv/bin/activate
    - pip install -U pip
    - pip install -r requirements.txt -r requirements-dev.txt
  script:
    - pytest -q
  cache:
    key:
      prefix: "pip"
      files:
        - requirements.txt
        - requirements-dev.txt
    paths:
      - .venv/
  artifacts:
    when: always
    reports:
      junit: pytest-junit.xml
    paths:
      - .pytest_cache/
      
# Datei-/FS-Scan (nutzt Trivy-Container)
security:
  stage: security
  image: aquasec/trivy:latest
  before_script: []          # default.before_script überspringen
  script:
    - trivy --version
    - trivy fs --severity CRITICAL,HIGH --ignore-unfixed --no-progress .
  cache:
    key: "trivy-cache"
    paths:
      - .trivy-cache/
    policy: pull-push

variables:
  BACKEND_IMAGE: "$CI_REGISTRY_IMAGE/anonymizer-backend:1.0.0"
  FRONTEND_IMAGE: "$CI_REGISTRY_IMAGE/anonymizer-frontend:1.0.0"
  TRIVY_CACHE_DIR: .trivy-cache

# Image-Scans (Backend)
trivy:backend:
  stage: security
  image: aquasec/trivy:latest
  script:
    - trivy image --severity CRITICAL,HIGH --ignore-unfixed --no-progress "$BACKEND_IMAGE"
    - trivy image --format cyclonedx --output backend-sbom.cdx.json "$BACKEND_IMAGE"
  artifacts:
    when: always
    paths: [ backend-sbom.cdx.json ]
    reports: { cyclonedx: backend-sbom.cdx.json }
  allow_failure: true

# Image-Scans (Frontend)
trivy:frontend:
  stage: security
  image: aquasec/trivy:latest
  script:
    - trivy image --severity CRITICAL,HIGH --ignore-unfixed --no-progress "$FRONTEND_IMAGE"
    - trivy image --format cyclonedx --output frontend-sbom.cdx.json "$FRONTEND_IMAGE"
  artifacts:
    when: always
    paths: [ frontend-sbom.cdx.json ]
    reports: { cyclonedx: frontend-sbom.cdx.json }
  allow_failure: true

# Kurzbegründung:
# before_script: [] in den Trivy-Jobs verhindert das (unnötige) 
# Python-Setup und spart Zeit.
# cache.policy: pull-push + key.files → gemeinsam genutzter, 
# automatisch invalidierter Pip-Cache.
# pytest --cov ... --cov-report=xml:coverage.xml erzeugt die 
# von GitLab erwartete coverage.xml.